1. 프로그래밍 아이디어 설명
2. 손으로 쓴 프로그램 소스 리스트 및 소스 설명

--

1. 프로그래밍 아이디어 설명

엡실론부터 사용자로부터 입력받은 길이까지의 알파벳 a,b,c로 만들어진 모든 string들을 출력하는 프로그램이다. 다음의 소스코드를 작성하기 위해 3진법 계산에 아이디어를 얻었고, lexicographic order로 string을 출력하는 것을, 한 string에 +1을 하는 것 처럼 생각했다. 만약 string의 길이를 최대 2로 주었다면, 길이가 0인 엡실론을 먼저 출력하고, 길이가 1인 a~c를 출력하고, 그 다음에 aa,ab, ... ,cc처럼 그 다음 알파벳으로 증가시키면서 출력하는 것이다. 이 과제에서 주어진 알파벳은 {a,b,c}라는, 아스키코드상에서 연속된 문자들이기 때문에 과제를 작성할 때는 '++'라는 증가연산을 사용하였다. 

2. 손으로 쓴 프로그램 소스 리스트 및 소스 설명

#include <stdio.h>	// C언어 기본 입출력 헤더
#include <string.h>	// 문자열에 관련한 함수를 사용하기 위해 선언하였다.
#include <stdlib.h>	// 동적할당 함수 malloc()과 강제종료 함수인 exit() 등을 사용하기 위해 선언하였다.
#include <math.h>	// 제곱 함수인 pow()를 사용하기 위해 선언하였다. 컴파일 시, gcc 옵션으로 -lm을 붙여주어야 한다.





먼저 main()함수 부터 살펴보고자 한다 : 
int main(int argc, char* argv[])
-> main()함수의 기본 리턴 값은 int형이기 때문에 int형으로 써주어야 안정적이다. 
-> 매개변수로 아규먼트를 받아서 프로그램 실행 시 명령줄 인수를 넣어줄 수 있게 한다. 

    /* 예외 처리 
     아규먼트 개수는 반드시 1개여야 한다. */
    if(argc == 1 || argc > 2) {
	print_error();
	exit(1);  // 강제 종료
    }

(오른쪽 글쓰기) 명령줄 인수가 1개가 아닐 때 에러 메시지를 출력하고 프로그램을 강제종료 시킨다.

    else {
	alpha_len=atoi(argv[1]);
	strnum=(char*)malloc(sizeof(char)*(alpha_len+1));
    }
(오른쪽 글쓰기) 명령줄 인수는 char형 문자열로 입력이 되기 때문에 atoi()함수를 이용해서 int형으로 바꿔준다. 
string의 최대 길이를 alpha_len이라는 int변수에 넣은 이유는, 이 길이만큼 반복을 해야하는 연산이 필요하기 때문이다. 
string은 char형 일차원 배열을 이용했는데, 출력을 하기위해 해당 문자열만 저장해도 충분하기 때문에 일차원 배열을 이용하였다.
문자열의 최대 길이를 고정적으로 설정하면 길이가 아주 긴 string은 표현하지 못하기 때문에 동적할당을 했다.

그 다음은 이 프로그램의 중추가 되는 반복문이다 : 
    for(int i=0; i<=alpha_len; i++){
	init_word(i, strnum);
	printf("%s\n", strnum);
(오른쪽 글쓰기) init_word()에서 현재 출력될 문자열의 길이인 i만큼의 'a'를
현재 출력될 문자열의 저장소인 strnum에 대입한다. 초기화하는 의미에서 init_word()라는 함수명을 썼다.


	/* for 조건문에서의 루프는 알파벳의 개수와 문자열의 길이의 거듭제곱에서,
	   반드시 -1을 빼준 값만큼 돌아야 한다.
	   빼주지 않는다면, add_one_operation()에서 문자열의 자릿수가 올라가기 때문에
	   잘못된 값을 참조하게 되기 때문이다. */
	for(int j=0; j<((int)pow((double)num_of_alpha, (double)i))-1; j++){
	    add_one_operation(i, strnum);
	    printf("%s\n", strnum);
	}
    }
특정 길이만큼의 문자열의 모든 조합을 출력하기 위해서는,
알파벳(a,b,c)의 개수에서 현재 출력될 문자열의 길이(i)만큼의 거듭제곱만큼 for문을 돌려야 한다. 
그러나 조건문 위에서 이미 해당 길이만큼으로 초기화된 문자열을 출력했으므로, 
문자열의 앞자리를 늘리지 않기 위하여 -1을 해야한다.

for문에서는 add_one_operation()을 이용해, 마치 3진수 숫자에 1을 더하는 연산처럼, 
문자열에 1증가 연산을 해서 strnum에 저장되어있는 해당 문자열을 다음 문자열로 바꿔준다.




main()함수 다음으로 중요한 역할을 하는 함수인 add_one_operation()함수이다 : 
void add_one_operation(int len, char* str){
    int inv=len-1;

    str[inv]++;
    for(inv=len-1; inv>=0; inv--){
	if(str[inv]>='d'){
	    str[inv]='a';
	    str[inv-1]++;   // 자릿수 받아올림.
	}
    }
}
이 함수에서는 현재 출력되는 string의 길이(len)의 이전 string(str)을 받아 증가연산을 한다.
마치 우리가 덧셈 연산을 할 때 피연산자를 더한 뒤, 보통 한자릿수에서 두자릿수,, 맨 마지막으론 왼쪽에 있는 가장 큰 자릿수 순서대로 받아올림을 하는 것 처럼, 문자열에 1을 더한 후 큰수에서 작은수로 루프를 돌리면서 받아올림을 한다. 



초기화 함수는 다음과 같다 : 
void init_word(int len, char* str) 
{
    int init;

    if(len == 0){
	strcpy(str, " ");
    }
(오른쪽 글쓰기) 길이가 0인 문자열은 엡실론이라하고 따로 처리한다. 

    else {
	for(init=0; init < len; init++){
	    str[init] = 'a';
	}
	str[init]='\0';
    }
}
(오른쪽 글쓰기) 아니라면 해당 길이만큼 'a'로 채우고, printf()에서 인식하게끔, string의 맨 마지막 offset에는 null문자를 추가한다.



다음은 명령행으로 인자를 잘못주었을 경우 에러메시지를 출력하는 함수이다 : 
void print_error(void)
{
    printf("잘못 입력 하셨습니다.\n\n");
    printf("사용법 : \n");
    printf("$ gen [자연수]\n");
    printf("gen 프로그램의 옵션의 개수는 1개여야 합니다.\n");
}
메인함수에서 명령행 인자를 1개 주지 않았을 경우, 이 함수를 호출하도록 했고, 
print_error()함수에서는 인자의 개수를 잘못줄경우, 사용법까지 알려주고 있다.


+ 추가 )
main()함수에서 변수선언한 부분을 글쓰기에서 빠트려서 간단히 짚고 넘어가려 한다 :
char *strnum;
int alpha_len;
const int num_of_alpha = 3;

알파벳의 개수를 나타내는 상수는 num_of_alpha이고, 값이 변하면 안되기 때문에 const int로 선언하였다.
